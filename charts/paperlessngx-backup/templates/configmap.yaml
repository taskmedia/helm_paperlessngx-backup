apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ include "plngxbackup.fullname" . }}"
data:
  backup.sh: |
    #!/bin/sh

    TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
    FILENAME="${TIMESTAMP}-plngx"
    FILENAME_ZIP="${FILENAME}.zip"

    PL_CONTAINER_NAME="paperless-ngx"
    PL_POD_NAME="{{ .Values.paperless.podname }}"

    echo "Creating paperless-ngx backup"
    kubectl exec ${PL_POD_NAME} --container ${PL_CONTAINER_NAME} -- \
      document_exporter \
      --no-progress-bar \
      --split-manifest \
      --use-folder-prefix \
      --zip \
      --zip-name ${FILENAME} \
      ../export

    echo "Copying backup to backup pod"
    kubectl cp \
      --container="${PL_CONTAINER_NAME}" \
      ${PL_POD_NAME}:../export/${FILENAME_ZIP} \
      /backup-plngx/${FILENAME_ZIP}

    echo "Remove backup from paperless-ngx pod"
    kubectl exec ${PL_POD_NAME} --container ${PL_CONTAINER_NAME} -- \
      rm ../export/${FILENAME_ZIP}

    {{- if .Values.encryption.enabled }}
    echo "Encrypting backup"
    gpg \
      --batch \
      --yes \
      --output /backup-plngx/${FILENAME_ZIP}.gpg \
      --encrypt \
      --recipient-file /scripts/publickey.gpg \
      --homedir /backup-plngx/.gnupg \
      --encrypt /backup-plngx/${FILENAME_ZIP}
    if ! [ $? -eq 0  ]; then
      echo "error on encryption"
      rm -rf /backup-plngx/${FILENAME_ZIP}
      exit 1
    fi
    rm /backup-plngx/${FILENAME_ZIP}
    FILENAME_ZIP="${FILENAME}.zip.gpg"
    {{- end }}

    echo "upload file to FTP"
    ncftpput \
      -u "${FTP_USERNAME}" \
      -p "${FTP_PASSWORD}" \
      "${FTP_HOST}" \
      "${FTP_PATH}" \
      "/backup-plngx/${FILENAME_ZIP}"
    if ! [ $? -eq 0  ]; then
      echo "error on upload"
      rm -rf ${FILENAME_ZIP}
      exit 1
    fi

    rm /backup-plngx/${FILENAME_ZIP}

    echo "finished paperless-ngx backup"

{{- if .Values.encryption.enabled }}
  publickey.gpg: |
    {{- .Values.encryption.publickey | nindent 4 }}
{{- end }}
